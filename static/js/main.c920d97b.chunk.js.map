{"version":3,"sources":["components/NavBar/NavBar.js","components/DisplayImage/DisplayImage.js","components/InputText/InputText.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","props","classes","react_default","a","createElement","Fragment","index_es","position","style","marginBottom","variant","color","className","DisplayImage","images","cols","map","image","key","id","src","largeImageURL","alt","subtitle","user","actionIcon","Icon_default","InputText","state","onChange","_callee","e","response","regenerator_default","wrap","_context","prev","next","target","value","axios","get","concat","process","sent","_this","setState","data","hits","t0","console","log","stop","this","fullWidth","placeholder","length","components_DisplayImage_DisplayImage","Component","App","components_NavBar_NavBar","components_InputText_InputText","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSA2BeA,uBAxBA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,IAmBCF,CAfA,SAAAI,GAAS,IACdC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAAEC,aAAc,SAC/CP,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYI,QAAQ,KAAKC,MAAM,UAAUC,UAAWX,EAAQF,MAA5D,wECmBKc,EA5BM,SAAAb,GAAS,IACpBc,EAAWd,EAAXc,OAER,OAAIA,EAEAZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUS,KAAM,GACbD,EAAOE,IAAI,SAAAC,GAAK,OACff,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcY,IAAKD,EAAME,IACvBjB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKH,EAAMI,cAAeC,IAAI,KACnCpB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEiB,SAAUrB,EAAAC,EAAAC,cAAA,mBAAWa,EAAMO,MAC3BC,WACEvB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,cAUTD,EAAAC,EAAAC,cAAA,yCCcIuB,6MAtCbC,MAAQ,CACNd,OAAQ,MAGVe,+CAAW,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAC,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,EAEgB,KAAnBL,EAAEO,OAAOC,MAFN,CAAAJ,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAGkBG,IAAMC,IAAN,gCAAAC,OACWC,qCADX,OAAAD,OAEnBX,EAAEO,OAAOC,MAFU,gCAHlB,OAGCP,EAHDG,EAAAS,KAQLC,EAAKC,SAAS,CAAEhC,OAAQkB,EAASe,KAAKC,OARjCb,EAAAE,KAAA,eAULQ,EAAKC,SAAS,CAAEhC,OAAQ,KAVnB,OAAAqB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,SAaPe,QAAQC,IAAR,wBAAAT,OAAAP,EAAAc,KAbO,yBAAAd,EAAAiB,SAAAtB,EAAAuB,KAAA,2IAiBF,IACCvC,EAAWuC,KAAKzB,MAAhBd,OAER,OACEZ,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEgD,WAAW,EACXC,YAAY,oBACZ1B,SAAUwB,KAAKxB,SACfrB,MAAO,CAAEC,aAAc,UAExBK,EAAO0C,OAAS,EAAItD,EAAAC,EAAAC,cAACqD,EAAD,CAAc3C,OAAQA,IAAa,aAjCxC4C,aCSTC,mLATX,OACEzD,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAD,cALUH,aCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c920d97b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography, withStyles } from '@material-ui/core';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  grow: {\r\n    flexGrow: 1\r\n  }\r\n};\r\n\r\nconst NavBar = props => {\r\n  const { classes } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" style={{ marginBottom: '40px' }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            PixaBay Image Finder\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(NavBar);\r\n","import React from 'react';\r\nimport {\r\n  GridList,\r\n  GridListTile,\r\n  GridListTileBar,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport InfoIcon from '@material-ui/core/Icon';\r\n\r\nconst DisplayImage = props => {\r\n  const { images } = props;\r\n\r\n  if (images) {\r\n    return (\r\n      <div>\r\n        <GridList cols={4}>\r\n          {images.map(image => (\r\n            <GridListTile key={image.id}>\r\n              <img src={image.largeImageURL} alt=\"\" />\r\n              <GridListTileBar\r\n                subtitle={<span>by: {image.user}</span>}\r\n                actionIcon={\r\n                  <IconButton>\r\n                    <InfoIcon />\r\n                  </IconButton>\r\n                }\r\n              />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>No images</p>;\r\n  }\r\n};\r\n\r\nexport default DisplayImage;\r\n","import React, { Component } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nimport DisplayImage from '../DisplayImage/DisplayImage';\r\n\r\n// Axios\r\nimport axios from 'axios';\r\n\r\nclass InputText extends Component {\r\n  state = {\r\n    images: []\r\n  };\r\n\r\n  onChange = async e => {\r\n    try {\r\n      if (e.target.value !== '') {\r\n        const response = await axios.get(\r\n          `https://pixabay.com/api/?key=${process.env.REACT_APP_API_KEY}&q=${\r\n            e.target.value\r\n          }&per_page=8&safesearch=true`\r\n        );\r\n        this.setState({ images: response.data.hits });\r\n      } else {\r\n        this.setState({ images: [] });\r\n      }\r\n    } catch (error) {\r\n      console.log(`Could not find image ${error}`);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { images } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <TextField\r\n          fullWidth={true}\r\n          placeholder=\"Search for images\"\r\n          onChange={this.onChange}\r\n          style={{ marginBottom: '20px' }}\r\n        />\r\n        {images.length > 0 ? <DisplayImage images={images} /> : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputText;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport NavBar from './components/NavBar/NavBar';\nimport InputText from './components/InputText/InputText';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <InputText />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}